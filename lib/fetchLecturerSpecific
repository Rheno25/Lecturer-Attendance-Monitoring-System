//lib/fetchLecturerSpecific.js

const { BigQuery } = require('@google-cloud/bigquery');
const bigquery = new BigQuery();

async function fetchLecturerSpecific(nip) {

  // Construct the SQL query with string interpolation
  const lecturerQuery = `
    SELECT nip, name, photo, mac, details, history, notes 
    FROM lecturer-attending.scannmap.lecturers 
    WHERE nip = @nip
  `;

  try {
    console.log('Executing BigQuery with nip:', nip); // Log the nip value
    console.log('SQL Query:', lecturerQuery); // Log the SQL query

    // Fetch lecturers
    const [lecturers] = await bigquery.query({
      query: lecturerQuery,
      location: 'US', // Ensure this matches your dataset location
      params: { nip }, // Use parameterized query to prevent SQL injection
    });

    console.log('Fetched lecturers:', lecturers);

    return lecturers;
  } catch (error) {
    console.error('Error fetching lecturer data:', error);
    throw error;
  }
}

async function updateLecturerDetails(nip, details) {
  
    // Construct the SQL query with string interpolation
    const updateDetails = `
      UPDATE lecturer-attending.scannmap.lecturers
      SET details = @details
      WHERE nip = @nip
    `;
  
    try {
      console.log('Executing BigQuery with nip:', nip); // Log the nip value
      console.log('SQL Query:', updateDetails); // Log the SQL query
  
      const options = {
        query: updateDetails,
        location: 'US',
        params: { nip, details }, // Ensure nip is treated as an integer
      };

        await bigquery.query(options);
      } catch (error) {
        console.error('Error updating lecturer details:', error);
        throw error;
      }
  }

  async function updateLecturerNote(nip, notes) {
    // Construct the SQL query with string interpolation
    const updateNotes = `
      UPDATE lecturer-attending.scannmap.lecturers
      SET notes = @notes
      WHERE nip = @nip
    `;
  
    try {
      console.log('Executing BigQuery with nip:', nip); // Log the nip value
      console.log('SQL Query:', updateNotes); // Log the SQL query
  
      const options = {
        query: updateNotes,
        location: 'US',
        params: { nip, notes }, // Ensure nip is treated as an integer
      };
  
      const [job] = await bigquery.query(options);
  
      console.log(`Updated notes for nip ${nip}:`, job);
  
      return job;
    } catch (error) {
      console.error('Error updating lecturer notes:', error);
      throw error;
    }
  }

module.exports = { fetchLecturerSpecific, updateLecturerDetails, updateLecturerNote };